# -*- coding: utf-8 -*-
"""MDS18 Final Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RUI6kdtW6fmLxWhKHMFLnjftxZ07Eavq
"""

from .load_model import load_model
import pandas as pd
import numpy as np

import warnings
warnings.filterwarnings("ignore")


def prediction(input):

    # Load models

    models = load_model()

    model_bod = models['BOD']
    model_nh3 = models['Ammonia (NH3)']
    model_no3 = models['Nitrate (NO3)']
    knn = models['COD']['knn']
    gbr = models['COD']['gbr']
    meta_model = models['COD']['meta_model']



    if isinstance(input, pd.DataFrame):
      input.dropna(inplace=True)

      columns_to_drop = []
      for column in input.columns:
        if input[column].dtype not in [np.float64, np.int64]:
          try:
            input[column] = input[column].astype(float)
          except (TypeError, ValueError):
            columns_to_drop.append(column)

      input.drop(columns = columns_to_drop, inplace = True)

      if not input.empty:

          # Preprocess user input
          header = input.columns.tolist()
          sub_header = ["COD", "pH", "Oil & Grease", "Suspended Solid", "Temp"]
          status = {'BOD': False, 'COD': False, 'Ammonia (NH3)': False, 'Nitrate (NO3)': False}

          # To store results dataframes
          results = []

          # COD
          cod_header = ['BOD', 'Ammonia (NH3)', 'Nitrate (NO3)', 'Oil & Grease', 'Suspended Solid']
          if all(item in header for item in cod_header):
              cod_input = input[cod_header]
              cod_features = np.column_stack([knn.predict(cod_input), gbr.predict(cod_input)])
              pred_cod = meta_model.predict(cod_features)
              pred_cod_df = pd.DataFrame(pred_cod, columns=['Predicted_COD'], index=cod_input.index)
              cod_results = pd.concat([cod_input, pred_cod_df], axis=1)
              results.append(cod_results)
              status['COD'] = True

          # Filter input (BOD, NH3, NO3)
          if all(item in header for item in sub_header):
              if all(item in input.columns for item in ['Ammonia (NH3)', 'Nitrate (NO3)']):
                  bod_header = ['COD', 'Ammonia (NH3)', 'Nitrate (NO3)'] + sub_header[1:]
                  bod_input = input[bod_header]
                  pred_bod = model_bod.predict(bod_input)
                  pred_bod_df = pd.DataFrame(pred_bod, columns=['Predicted_BOD'], index=bod_input.index)
                  results.append(pd.concat([bod_input, pred_bod_df], axis=1))
                  status['BOD'] = True

              if all(item in input.columns for item in ['BOD', 'Nitrate (NO3)']):
                  nh3_header = ['BOD', 'COD', 'Nitrate (NO3)'] + sub_header[1:]
                  nh3_input = input[nh3_header]
                  pred_nh3 = model_nh3.predict(nh3_input)
                  pred_nh3_df = pd.DataFrame(pred_nh3, columns=['Predicted_NH3'], index=nh3_input.index)
                  results.append(pd.concat([nh3_input, pred_nh3_df], axis=1))
                  status['Ammonia (NH3)'] = True

              if all(item in input.columns for item in ['BOD', 'Ammonia (NH3)']):
                  no3_header = ['BOD', 'COD', 'Ammonia (NH3)'] + sub_header[1:]
                  no3_input = input[no3_header]
                  pred_no3 = model_no3.predict(no3_input)
                  pred_no3_df = pd.DataFrame(pred_no3, columns=['Predicted_NO3'], index=no3_input.index)
                  results.append(pd.concat([no3_input, pred_no3_df], axis=1))
                  status['Nitrate (NO3)'] = True


          # Combine all results
          if results:
              final_results = pd.concat(results, axis=1)
              final_results = final_results.loc[:, ~final_results.columns.duplicated()]
              return final_results
          return None